---
title: "ENVS 193DS week 7 coding workshop"
format: html
execute: 
  warning: false 
  message: false 
---

```{r eval=FALSE}
install.packages("performance")
install.packages("broom")
install.packages("flextable")
install.packages("ggeffects")
install.packages("car")

```

```{r libraries}
library(tidyverse)
library(here)
library(lterdatasampler)
library(naniar)
```

```{r}
library(performance)
library(broom)
library(flextable)
library(ggeffects)
library(car)

```

# linear models

how does the stem length *predict* stem dry mass

```{r filtering-data}
maples_data <- hbr_maples %>% 
  filter(year == 2003 & watershed == "Reference")
```

Visualizing missing data

```{r missing-data-vis}
gg_miss_var(maples_data)
```

Create an exploratory data visualization:

```{r explore-data-vis}
ggplot(data = maples_data, aes(x = stem_length, y = stem_dry_mass)) + geom_point()
```

let's try a model

```{r linear-model-maples}
maples_model <- lm(stem_dry_mass ~ stem_length, data = maples_data)

maples_model
```

Check assumptions

1.  linear relationship between variables: yes (used the exploratory data visualization to check that)
2.  independence of errors: yes (making that assumption based on how the data were collected)
3.  homoskedasticity of errors: yes (making that decision from residuals vs. fitted plot/scale-location plots)
4.  normally distributed errors: yes (looking at QQ plot of residuals)

```{r checking-assumptions}
par(mfrow = c(2, 2))
plot(maples_model)
```

turn off 2x2 grid:

```{r turning-off-the-grid, results = FALSE}
dev.off()
```

# putting things together to communicate

## model predictions

```{r pulling-out-predictions}
predictions <- ggpredict(maples_model, terms = "stem_length")
```

plot predictions:
```{r plotting-predictions}
plot_predictions <- ggplot(data = maples_data, aes(x = stem_length, y = stem_dry_mass)) +
  # first plot the underlying data
  geom_point() +
  geom_line(data = predictions, aes(x = x, y = predicted), color = "blue", linewidth = 1) +
  # plot the confidence interval around model estimates
  geom_ribbon(data = predictions, aes(x = x, y = predicted, ymin = conf.low, ymax = conf.high), alpha = 0.2)

plot_predictions
```


## create tables

```{r model-summary-table}
model_summary <- summary(maples_model)

model_squares <- anova(maples_model)

model_summary
```

# making a table

```{r}
model_squares_table <- tidy(model_squares) %>% 
  mutate(p.value = case_when(
    p.value < 0.001 ~ "<0.001"
  )) %>% 
  flextable() %>% 
  set_header_labels(df = "Degrees of Freedom", 
                    sumsq = "sum of squares")
model_squares_table
```


